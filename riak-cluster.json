{
  "AWSTemplateFormatVersion": "2010-09-09", 
  "Description": "Launches a Riak Cluster", 
  "Mappings": {
    "AWSInstanceType2Arch": {
      "c1.medium": {
        "Arch": "64"
      }, 
      "c1.xlarge": {
        "Arch": "64"
      }, 
      "cc1.4xlarge": {
        "Arch": "64Cluster"
      }, 
      "cc2.8xlarge": {
        "Arch": "64Cluster"
      }, 
      "cg1.4xlarge": {
        "Arch": "64GPU"
      }, 
      "m1.large": {
        "Arch": "64"
      }, 
      "m1.medium": {
        "Arch": "64"
      }, 
      "m1.small": {
        "Arch": "64"
      }, 
      "m1.xlarge": {
        "Arch": "64"
      }, 
      "m2.2xlarge": {
        "Arch": "64"
      }, 
      "m2.4xlarge": {
        "Arch": "64"
      }, 
      "m2.xlarge": {
        "Arch": "64"
      }, 
      "t1.micro": {
        "Arch": "64"
      }
    }, 
    "ebs": {
      "ap-northeast-1": {
        "32": "ami-486cd349  ", 
        "64": "ami-4e6cd34f", 
        "64Cluster": "NOT_YET_SUPPORTED", 
        "64GPU": "NOT_YET_SUPPORTED"
      }, 
      "ap-southeast-1": {
        "32": "ami-a2a7e7f0", 
        "64": "ami-a6a7e7f4", 
        "64Cluster": "NOT_YET_SUPPORTED", 
        "64GPU": "NOT_YET_SUPPORTED"
      }, 
      "eu-west-1": {
        "32": "ami-937474e7", 
        "64": "ami-c37474b7", 
        "64Cluster": "ami-d97474ad", 
        "64GPU": "ami-1b02026f"
      }, 
      "sa-east-1": {
        "32": "ami-e209d0ff", 
        "64": "ami-1e08d103", 
        "64Cluster": "NOT_YET_SUPPORTED", 
        "64GPU": "NOT_YET_SUPPORTED"
      }, 
      "us-east-1": {
        "32": "ami-1a249873", 
        "64": "ami-1624987f", 
        "64Cluster": "ami-08249861", 
        "64GPU": "ami-02f54a6b"
      }, 
      "us-west-1": {
        "32": "ami-19f9de5c", 
        "64": "ami-1bf9de5e", 
        "64Cluster": "NOT_YET_SUPPORTED", 
        "64GPU": "NOT_YET_SUPPORTED"
      }, 
      "us-west-2": {
        "32": "ami-2231bf12", 
        "64": "ami-2a31bf1a", 
        "64Cluster": "ami-2431bf14", 
        "64GPU": "NOT_YET_SUPPORTED"
      }
    }, 
    "ephemeral": {
      "ap-northeast-1": {
        "32": "ami-586cd359", 
        "64": "ami-5a6cd35b"
      }, 
      "ap-southeast-1": {
        "32": "ami-aaa7e7f8", 
        "64": "ami-a8a7e7fa"
      }, 
      "eu-west-1": {
        "32": "ami-cf7474bb", 
        "64": "ami-b57474c1"
      }, 
      "sa-east-1": {
        "32": "  ami-1a08d107", 
        "64": "  ami-1608d10b"
      }, 
      "us-east-1": {
        "32": "ami-10249879", 
        "64": "ami-e8249881"
      }, 
      "us-west-1": {
        "32": "ami-27f9de62", 
        "64": "ami-21f9de64"
      }, 
      "us-west-2": {
        "32": "ami-2c31bf1c", 
        "64": "ami-2e31bf1e"
      }
    }
  }, 
  "Parameters": {
    "DiskType": {
      "AllowedValues": [
        "ephemeral", 
        "ebs"
      ], 
      "Default": "ephemeral", 
      "Description": "Type of Disk to use ( ephemeral/ebs )", 
      "Type": "String"
    }, 
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the Riak Cluster", 
      "Type": "String"
    }, 
    "RiakClusterSize": {
      "Description": "Number of nodes in the Riak cluster", 
      "Type": "String"
    }, 
    "RiakInstanceType": {
      "AllowedValues": [
        "m1.small", 
        "m1.medium", 
        "m1.large", 
        "m1.xlarge", 
        "m2.xlarge", 
        "m2.2xlarge", 
        "m2.4xlarge", 
        "c1.medium", 
        "c1.xlarge", 
        "cc1.4xlarge"
      ], 
      "ConstraintDescription": "must be valid instance type. ", 
      "Default": "m1.large", 
      "Description": "Type of EC2 instance for Riak", 
      "Type": "String"
    }, 
    "RingSize": {
      "AllowedValues": [
        "64", 
        "128", 
        "256", 
        "512"
      ], 
      "Default": "64", 
      "Description": "Size of the Riak Ring", 
      "Type": "String"
    }
  }, 
  "Resources": {
    "ApplicationWaitCondition": {
      "DependsOn": "RiakServerGroup", 
      "Properties": {
        "Handle": {
          "Ref": "ApplicationWaitHandle"
        }, 
        "Timeout": "4500"
      }, 
      "Type": "AWS::CloudFormation::WaitCondition"
    }, 
    "ApplicationWaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle"
    }, 
    "CFNInitUser": {
      "Properties": {
        "Path": "/", 
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "cloudformation:DescribeStackResource", 
                    "s3:GetObject"
                  ], 
                  "Effect": "Allow", 
                  "Resource": "*"
                }
              ]
            }, 
            "PolicyName": "AccessForCFNInit"
          }
        ]
      }, 
      "Type": "AWS::IAM::User"
    }, 
    "CFNKeys": {
      "Properties": {
        "UserName": {
          "Ref": "CFNInitUser"
        }
      }, 
      "Type": "AWS::IAM::AccessKey"
    }, 
    "ClusterCommunication1": {
      "Properties": {
        "FromPort": "-1", 
        "GroupName": {
          "Ref": "InstanceSecurityGroup"
        }, 
        "IpProtocol": "icmp", 
        "SourceSecurityGroupName": {
          "Ref": "InstanceSecurityGroup"
        }, 
        "ToPort": "-1"
      }, 
      "Type": "AWS::EC2::SecurityGroupIngress"
    }, 
    "ClusterCommunication2": {
      "Properties": {
        "FromPort": "1", 
        "GroupName": {
          "Ref": "InstanceSecurityGroup"
        }, 
        "IpProtocol": "tcp", 
        "SourceSecurityGroupName": {
          "Ref": "InstanceSecurityGroup"
        }, 
        "ToPort": "65356"
      }, 
      "Type": "AWS::EC2::SecurityGroupIngress"
    }, 
    "ClusterCommunication3": {
      "Properties": {
        "FromPort": "1", 
        "GroupName": {
          "Ref": "InstanceSecurityGroup"
        }, 
        "IpProtocol": "udp", 
        "SourceSecurityGroupName": {
          "Ref": "InstanceSecurityGroup"
        }, 
        "ToPort": "65356"
      }, 
      "Type": "AWS::EC2::SecurityGroupIngress"
    }, 
    "InstanceSecurityGroup": {
      "Properties": {
        "GroupDescription": "Enable SSH access via port 22", 
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0", 
            "FromPort": "22", 
            "IpProtocol": "tcp", 
            "ToPort": "22"
          }
        ]
      }, 
      "Type": "AWS::EC2::SecurityGroup"
    }, 
    "LaunchConfig": {
      "Properties": {
        "IamInstanceProfile": {
          "Ref": "RootInstanceProfile"
        }, 
        "ImageId": {
          "Fn::FindInMap": [
            {
              "Ref": "DiskType"
            }, 
            {
              "Ref": "AWS::Region"
            }, 
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch", 
                {
                  "Ref": "RiakInstanceType"
                }, 
                "Arch"
              ]
            }
          ]
        }, 
        "InstanceType": {
          "Ref": "RiakInstanceType"
        }, 
        "KeyName": {
          "Ref": "KeyName"
        }, 
        "SecurityGroups": [
          {
            "Ref": "InstanceSecurityGroup"
          }
        ], 
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "\n", 
              [
                "#!/bin/bash -v", 
                "exec > >(tee /var/log/cfn-data.log|logger -t user-data -s 2>/dev/console) 2>&1", 
                "", 
                "sleep 10", 
                "", 
                "function retry {", 
                "   nTrys=0", 
                "   maxTrys=5", 
                "   status=256", 
                "   until [ $status == 0 ] ; do", 
                "      $1", 
                "      status=$?", 
                "      nTrys=$(($nTrys + 1))", 
                "      if [ $nTrys -gt $maxTrys ] ; then", 
                "            echo \"Number of re-trys exceeded. Exit code: $status\"", 
                "            exit $status", 
                "      fi", 
                "      if [ $status != 0 ] ; then", 
                "            echo \"Failed (exit code $status)... retry $nTrys\"", 
                "            sleep 10", 
                "      fi", 
                "   done", 
                "}", 
                "", 
                "yum update -y aws-cfn-bootstrap", 
                "", 
                "#for all the stuff that complains about sudo and tty", 
                "sed -i 's,Defaults    requiretty,#Defaults    requiretty,g' /etc/sudoers", 
                "", 
                "function error_exit", 
                "{", 
                {
                  "Fn::Join": [
                    "", 
                    [
                      "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '", 
                      {
                        "Ref": "ApplicationWaitHandle"
                      }, 
                      "'"
                    ]
                  ]
                }, 
                "}", 
                "yum update -y aws-cfn-bootstrap", 
                "#this runs the first stage of cfinit", 
                {
                  "Fn::Join": [
                    "", 
                    [
                      "#/opt/aws/bin/cfn-init -c ascending -v --region ", 
                      {
                        "Ref": "AWS::Region"
                      }, 
                      " -s ", 
                      {
                        "Ref": "AWS::StackName"
                      }, 
                      " -r ", 
                      "LaunchConfig", 
                      " --access-key ", 
                      {
                        "Ref": "CFNKeys"
                      }, 
                      " --secret-key ", 
                      {
                        "Fn::GetAtt": [
                          "CFNKeys", 
                          "SecretAccessKey"
                        ]
                      }, 
                      " || error_exit 'Failed to initialize client using cfn-init'"
                    ]
                  ]
                }, 
                "", 
                "", 
                "", 
                "", 
                "yum install -y rubygems git puppet ruby-devel make gcc", 
                "gem install hiera hiera-puppet", 
                "mkdir -p /var/lib/hiera", 
                {
                  "Fn::Join": [
                    "", 
                    [
                      "echo 'ring_creation_size: ", 
                      {
                        "Ref": "RingSize"
                      }, 
                      "' >> '/var/lib/hiera/common.yaml'"
                    ]
                  ]
                }, 
                "", 
                "mkdir -p /tmp/puppet/modules", 
                "retry \"git clone http://github.com/basho/puppet-riak -b cfn /tmp/puppet/modules/riak\"", 
                "retry \"git clone https://github.com/KrisBuytaert/puppet-hiera.git /tmp/puppet/modules/puppet-hiera\"", 
                "retry \"git clone https://github.com/puppetlabs/puppetlabs-stdlib /tmp/puppet/modules/stdlib\"", 
                "puppet apply --modulepath=/tmp/puppet/modules -e \"include riak\" --trace --debug --verbose", 
                "", 
                "echo \"riak soft nofile 65336\" >> /etc/security/limits.conf", 
                "echo \"riak hard nofile 65336\" >> /etc/security/limits.conf", 
                "echo \"root soft nofile 65336\" >> /etc/security/limits.conf", 
                "echo \"root hard nofile 65336\" >> /etc/security/limits.conf", 
                "", 
                "echo \"vm.swappiness = 0\" >> /etc/sysctl.conf", 
                "echo \"net.ipv4.tcp_max_syn_backlog = 40000\" >> /etc/sysctl.conf", 
                "echo \"net.core.somaxconn=4000\" >> /etc/sysctl.conf", 
                "echo \"net.ipv4.tcp_timestamps = 0\" >> /etc/sysctl.conf", 
                "echo \"net.ipv4.tcp_sack = 1\" >> /etc/sysctl.conf", 
                "echo \"net.ipv4.tcp_window_scaling = 1\" >> /etc/sysctl.conf", 
                "echo \"net.ipv4.tcp_fin_timeout = 15\" >> /etc/sysctl.conf", 
                "echo \"net.ipv4.tcp_keepalive_intvl = 30\" >> /etc/sysctl.conf", 
                "echo \"net.ipv4.tcp_tw_reuse = 1\" >> /etc/sysctl.conf", 
                "echo \"+P 256000\" >> /etc/riak/vm.args", 
                "echo \"+swt very_low\" >> /etc/riak/vm.args", 
                "echo \"+zdbbl 32768\" >> /etc/riak/vm.args", 
                "sysctl -p", 
                "", 
                "# Disable Riak ports access",              
                "sudo /sbin/iptables -A INPUT -p tcp --destination-port 8098 -j DROP",
                "sudo /sbin/iptables -A INPUT -p tcp --destination-port 8087 -j DROP",
                "",
                "service riak stop", 
                "service riak start", 
                "sleep 5", 
                "retry \"git clone http://github.com/basho/cloudformation-riak  /tmp/cloudformation-riak\"", 
                "/tmp/cloudformation-riak/tools/join_riak_cluster.py", 
                "/usr/sbin/riak ping", 
                "result_code=$?",                
                "if [[ $result_code == 0 ]]; then"
                " # Enable Riak ports access",
                " sudo /sbin/iptables -D INPUT -p tcp --destination-port 8098 -j DROP",
                " sudo /sbin/iptables -D INPUT -p tcp --destination-port 8087 -j DROP",                
                "fi",              
                {
                  "Fn::Join": [
                    "", 
                    [
                      "/opt/aws/bin/cfn-signal -e $result_code '", 
                      {
                        "Ref": "ApplicationWaitHandle"
                      }, 
                      "'"
                    ]
                  ]
                }, 
                "#turn back on requiretty for sudo", 
                "sed -i 's,#Defaults    requiretty,Defaults    requiretty,g' /etc/sudoers"
              ]
            ]
          }
        }
      }, 
      "Type": "AWS::AutoScaling::LaunchConfiguration"
    }, 
    "RiakServerGroup": {
      "Properties": {
        "AvailabilityZones": {
          "Fn::GetAZs": ""
        }, 
        "LaunchConfigurationName": {
          "Ref": "LaunchConfig"
        }, 
        "MaxSize": {
          "Ref": "RiakClusterSize"
        }, 
        "MinSize": {
          "Ref": "RiakClusterSize"
        }
      }, 
      "Type": "AWS::AutoScaling::AutoScalingGroup"
    }, 
    "RolePolicies": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeInstanceStatus", 
                "ec2:DescribeInstances", 
                "ec2:DescribeRegions", 
                "ec2:DescribeTags"
              ], 
              "Effect": "Allow", 
              "Resource": "*"
            }
          ]
        }, 
        "PolicyName": "root", 
        "Roles": [
          {
            "Ref": "RootRole"
          }
        ]
      }, 
      "Type": "AWS::IAM::Policy"
    }, 
    "RootInstanceProfile": {
      "Properties": {
        "Path": "/", 
        "Roles": [
          {
            "Ref": "RootRole"
          }
        ]
      }, 
      "Type": "AWS::IAM::InstanceProfile"
    }, 
    "RootRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ], 
              "Effect": "Allow", 
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              }
            }
          ]
        }, 
        "Path": "/"
      }, 
      "Type": "AWS::IAM::Role"
    }
  }
}